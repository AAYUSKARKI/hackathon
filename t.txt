import React, { useState, useMemo, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import FlipMove from 'react-flip-move';
import Confetti from 'react-confetti';
import useSound from 'use-sound';
import { Shuffle, RefreshCcw, Users, Award } from 'lucide-react';
import { fetchUsers } from '../../api-call/userService';

// Strict TypeScript Types
type Participant = {
  _id: string;
  name: string;
  email: string;
  semester: 'First' | 'Third';
};

type Team = {
  id: number;
  members: Participant[];
};

const TEAM_SIZE = 4;  // Total team members per team
const FIRST_SEMESTER_TARGET = 2;  // Target first-semester students per team
const THIRD_SEMESTER_TARGET = 2;  // Target third-semester students per team

const TeamShuffler: React.FC = () => {
  const [participants, setParticipants] = useState<Participant[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  const [isShuffling, setIsShuffling] = useState<boolean>(false);
  const [showConfetti, setShowConfetti] = useState<boolean>(false);
  const teamsRef = useRef<HTMLDivElement>(null);

  // Sound hooks
  const [playShuffle] = useSound('/sound/shuffle.mp3');
  const [playSuccess] = useSound('/sound/success.mp3');

  // Load users on component mount
  useEffect(() => {
    const loadUsers = async () => {
      try {
        const fetchedUsers = await fetchUsers();
        setParticipants(fetchedUsers);
      } catch (err) {
        console.error('Error loading users:', err);
      }
    };
    loadUsers();
  }, []);

  const balancedTeamShuffle = (participants: Participant[]): Team[] => {
    // Enhanced shuffling algorithm with flexible balancing
    const shuffle = <T,>(array: T[]): T[] => {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    };

    // Separate and shuffle participants by semester
    let firstSemester = shuffle(participants.filter(p => p.semester === 'First'));
    let thirdSemester = shuffle(participants.filter(p => p.semester === 'Third'));

    // Calculate maximum possible balanced teams
    const maxBalancedTeams = Math.min(
      Math.floor(firstSemester.length / FIRST_SEMESTER_TARGET),
      Math.floor(thirdSemester.length / THIRD_SEMESTER_TARGET)
    );

    // Initialize teams array
    const teams: Team[] = [];

    // Create balanced teams first
    for (let i = 0; i < maxBalancedTeams; i++) {
      const team: Team = { 
        id: teams.length + 1, 
        members: []
      };

      // Add first semester students
      for (let j = 0; j < FIRST_SEMESTER_TARGET; j++) {
        const member = firstSemester.pop();
        if (member) team.members.push(member);
      }

      // Add third semester students
      for (let j = 0; j < THIRD_SEMESTER_TARGET; j++) {
        const member = thirdSemester.pop();
        if (member) team.members.push(member);
      }

      teams.push(team);
    }

    // Collect remaining participants
    const remainingParticipants = [...firstSemester, ...thirdSemester];

    // Distribute remaining participants
    remainingParticipants.forEach((participant, index) => {
      // If existing teams are not full, add to them
      if (teams[index % teams.length].members.length < TEAM_SIZE) {
        teams[index % teams.length].members.push(participant);
      } else {
        // If existing teams are full, create a new team
        const lastTeamId = teams.length > 0 ? teams[teams.length - 1].id + 1 : 1;
        teams.push({
          id: lastTeamId,
          members: [participant]
        });
      }
    });

    return teams;
  };

  const shuffleTeams = () => {
    playShuffle();
    setIsShuffling(true);
    setShowConfetti(false);

    // Animated shuffling simulation
    const shuffleStages = 5;
    let currentStage = 0;

    const shuffleInterval = setInterval(() => {
      if (currentStage < shuffleStages) {
        const tempTeams: Team[] = Array(4).fill(0).map((_, i) => ({
          id: i + 1,
          members: Array(4).fill({ 
            _id: '', 
            name: 'Shuffling...', 
            email: '', 
            semester: '...' as 'First' | 'Third' 
          })
        }));
        setTeams(tempTeams);
        currentStage++;
      } else {
        clearInterval(shuffleInterval);
        const finalTeams = balancedTeamShuffle(participants);
        
        playSuccess();

        setTeams(finalTeams);
        setIsShuffling(false);
        setShowConfetti(true);
        teamsRef.current?.scrollIntoView({ behavior: 'smooth' });
      }
    }, 1000);
  };

  const teamStats = useMemo(() => {
    const firstSemesterCount = participants.filter(p => p.semester === 'First').length;
    const thirdSemesterCount = participants.filter(p => p.semester === 'Third').length;

    return {
      totalParticipants: participants.length,
      firstSemesterCount,
      thirdSemesterCount,
      balancedTeamsPossible: Math.min(
        Math.floor(firstSemesterCount / FIRST_SEMESTER_TARGET),
        Math.floor(thirdSemesterCount / THIRD_SEMESTER_TARGET)
      )
    };
  }, [participants]);

  // Render method remains largely the same as in the previous implementation
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 text-gray-900 p-10 flex flex-col items-center overflow-hidden">
      {showConfetti && <Confetti recycle={false} />}

        {/* Shuffling overlay */}
      {isShuffling && (
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-white bg-opacity-80 flex items-center justify-center z-50"
        >
          <motion.div 
            animate={{
              rotate: [0, 360],
              scale: [1, 1.2, 1],
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut"
            }}
            className="w-32 h-32 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center"
          >
            <Shuffle className="w-16 h-16 text-white" />
          </motion.div>
          <h2 className="absolute text-2xl font-bold text-gray-800 mt-48 animate-pulse">
            Shuffling Teams...
          </h2>
        </motion.div>
      )}
      
      <motion.div 
        initial={{ opacity: 0, y: -50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="w-full max-w-6xl"
      >
        <h1 className="text-5xl font-extrabold mb-8 text-center flex items-center justify-center gap-4">
          <Users className="text-blue-600 w-12 h-12" />
          Team Shuffler
          <Award className="text-green-600 w-12 h-12" />
        </h1>

        <div className="flex justify-center mb-8">
          <motion.button
            onClick={shuffleTeams}
            disabled={isShuffling || participants.length < TEAM_SIZE}
            whileTap={{ scale: 0.9 }}
            whileHover={{ scale: 1.05 }}
            className={`flex items-center gap-2 px-8 py-4 rounded-full text-lg font-bold shadow-lg transition-all duration-300 ${
              isShuffling || participants.length < TEAM_SIZE
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white'
            }`}
          >
            {isShuffling ? (
              <>
                <RefreshCcw className="animate-spin" /> Shuffling...
              </>
            ) : (
              <>
                <Shuffle /> Shuffle Teams
              </>
            )}
          </motion.button>
        </div>

        <div className="text-center my-6">
          <h2 className="text-2xl font-bold mb-4">Participant Stats</h2>
          <div className="flex justify-center gap-4">
            {[
              { label: 'Total Participants', value: teamStats.totalParticipants, color: 'text-green-600' },
              { label: 'First Semester', value: teamStats.firstSemesterCount, color: 'text-blue-600' },
              { label: 'Third Semester', value: teamStats.thirdSemesterCount, color: 'text-purple-600' },
              { label: 'Possible Teams', value: teamStats.possibleTeams, color: 'text-red-600' }
            ].map((stat, index) => (
              <motion.div 
                key={index}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: index * 0.2 }}
                className="bg-white rounded-xl p-4 shadow-md"
              >
                <h3 className="text-lg font-semibold text-gray-700">{stat.label}</h3>
                <p className={`text-3xl font-bold ${stat.color}`}>{stat.value}</p>
              </motion.div>
            ))}
          </div>
        </div>

        <AnimatePresence>
          {teams.length > 0 && (
            <div ref={teamsRef} className="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {teams.map((team) => (
                <motion.div
                  key={team.id}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.6 }}
                  className="bg-white rounded-2xl p-6 shadow-xl hover:shadow-2xl transition-all transform hover:-translate-y-2"
                >
                  <h3 className="text-2xl font-bold mb-4 text-center text-blue-600">
                    Team {team.id}
                  </h3>
                  <ul className="space-y-3">
                    {team.members.map((member) => (
                      <li
                        key={member._id}
                        className="flex justify-between items-center bg-gray-100 p-3 rounded-xl transition hover:bg-gray-200"
                      >
                        <span className="font-semibold text-gray-800">{member.name}</span>
                        <span className="text-sm text-gray-600 ml-2">{member.semester}</span>
                      </li>
                    ))}
                  </ul>
                </motion.div>
              ))}
            </div>
          )}
        </AnimatePresence>
      </motion.div>
    </div>
  );
};

export default TeamShuffler;
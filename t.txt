const formFinalTeams = (
participants: Participant[],
setTeams: React.Dispatch<React.SetStateAction<Team[]>>,
setShufflingParticipants: React.Dispatch<React.SetStateAction<Participant[]>>,
playSuccess: () => void,
setShowConfetti: React.Dispatch<React.SetStateAction<boolean>>,
setIsShuffling: React.Dispatch<React.SetStateAction<boolean>>,
teamsRef: React.RefObject<HTMLDivElement>
) => {
// Helper function to shuffle an array
function shuffleArray<T>(array: T[]): T[] {
for (let i = array.length - 1; i > 0; i--) {
const j = Math.floor(Math.random() * (i + 1));
[array[i], array[j]] = [array[j], array[i]];
}
return array;
}

// Separate participants by semester
const participantsBySemester = participants.reduce<{
First: Participant[];
Third: Participant[];
}>(
(acc, participant) => {
acc[participant.semester].push(participant);
return acc;
},
{ First: [], Third: [] }
);

const firstSemester = shuffleArray(participantsBySemester.First);
const thirdSemester = shuffleArray(participantsBySemester.Third);

const shuffledTeams: Team[] = [];

// Step 1: Form as many balanced teams of 4 members (2 First + 2 Third) as possible
let teamId = 1;
while (firstSemester.length >= 2 && thirdSemester.length >= 2) {
shuffledTeams.push({
id: teamId++,
members: [
firstSemester.pop()!,
firstSemester.pop()!,
thirdSemester.pop()!,
thirdSemester.pop()!,
],
});
}

// Collect remaining participants
const remainingParticipants = [...firstSemester, ...thirdSemester];

// Step 2: Form teams of 3 members if possible
while (remainingParticipants.length >= 3) {
const teamMembers: Participant[] = [
remainingParticipants.pop()!,
remainingParticipants.pop()!,
remainingParticipants.pop()!,
];
shuffledTeams.push({
  id: teamId++,
  members: teamMembers,
});
}
// Step 3: Distribute remaining participants to avoid teams of 2
if (remainingParticipants.length === 2) {
const participant1 = remainingParticipants.pop()!;
const participant2 = remainingParticipants.pop()!;

// Add these participants to the teams with the fewest members
shuffledTeams.sort((a, b) => a.members.length - b.members.length);
shuffledTeams[0].members.push(participant1);
shuffledTeams[1].members.push(participant2);

} else if (remainingParticipants.length === 1) {
// Add the last remaining participant to the team with the fewest members
const participant = remainingParticipants.pop()!;
shuffledTeams.sort((a, b) => a.members.length - b.members.length);
shuffledTeams[0].members.push(participant);
}

// Finalize teams and update state
setTeams(shuffledTeams);
setShufflingParticipants([]);
playSuccess();
setShowConfetti(true);
setIsShuffling(false);

// Scroll to the teams display section
teamsRef.current?.scrollIntoView({ behavior: 'smooth' });
};